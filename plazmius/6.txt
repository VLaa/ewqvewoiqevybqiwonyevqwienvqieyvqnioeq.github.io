// I1
using System;

namespace VL
{
    class MainClass
    {
        static int sumIterative (int[] x)
        {
            int sum = 0;
            for (int i = 0; i < x.Length; sum += x[i++]) ;

            return sum;

        }

        static int minIterative(int[] x)
        {
            int min = x[0];
            for (int i = 0; i < x.Length; i++)
                if (min >= x[i]) min = x[i];

            return min;

        }

        private static int minRec(int[] x, int i = 0)
        {
            if (i == x.Length - 1)
                return x[i];

            return Math.Min(x[i], minRec(x, i + 1));
        }

        private static int sumRec(int number, int[] x)
        {
            if (number >= x.Length) { return 0; }
            return x[number] + sumRec(number + 1, x);
        }

        public static int sumRecurse(int[] x)
        {
            return sumRec(0, x);
        }

        static void Main(string[] args)
        {
            var array = new int[] {  2, 2, 32, 32, 3  };

            var sumI = sumIterative(array);
            var sumR = sumRecurse(array);
            var minI = minIterative(array);
            var minR = minRec(array);

            Console.WriteLine(sumI);
            Console.WriteLine(sumR);
            Console.WriteLine(minI);
            Console.WriteLine(minR);
        }
    }
}